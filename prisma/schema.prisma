// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Episode {
  id          String   @id
  title       String
  posted      DateTime @default(now())
  slug        String
  description String
  books       Book[]

  @@index([posted])
}

model Book {
  id            Int           @id @default(autoincrement())
  title         String
  longTitle     String?
  isbn10        String
  isbn13        String
  deweyDecimal  String?
  binding       String?
  publisher     String?
  language      String?
  datePublished DateTime?
  edition       String?
  pages         Int?
  length        Int?
  width         Int?
  height        Int?
  weight        Int?
  lengthUnit    String?
  widthUnit     String?
  heightUnit    String?
  weightUnit    String?
  overview      String?
  coverImage    String?
  msrp          Float?
  excerpt       String?
  synopsis      String?
  authors       Author[]
  subjects      String[]
  episodes      Episode[]
  relatedBooksA RelatedBook[] @relation(name: "bookA")
  relatedBooksB RelatedBook[] @relation(name: "bookB")

  @@unique([isbn10])
  @@unique([isbn13])
  @@index([title])
  @@index([longTitle])
}

model RelatedBook {
  bookA   Book @relation(name: "bookA", references: [id], fields: [bookIdA])
  bookIdA Int
  bookB   Book @relation(name: "bookB", references: [id], fields: [bookIdB])
  bookIdB Int

  @@unique([bookIdA, bookIdB])
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]

  @@unique([name])
}
